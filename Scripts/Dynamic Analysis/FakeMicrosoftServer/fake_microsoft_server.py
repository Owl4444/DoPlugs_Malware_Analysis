"""
Create a fake HTTPS to be safe

Creating the certs and key
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes

"""

import http.server
import ssl
import socketserver

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Print details of the GET request
        print(f"Received GET request for {self.path}")
        print("Headers:")
        for header in self.headers:
            print(f"{header}: {self.headers[header]}")
        
        # Call the superclass method to actually handle the request
        http.server.SimpleHTTPRequestHandler.do_GET(self)

    def do_POST(self):
        # Print details of the POST request
        print(f"Received POST request for {self.path}")
        print("Headers:")
        for header in self.headers:
            print(f"{header}: {self.headers[header]}")
        
        # Get the length of the data
        content_length = int(self.headers['Content-Length'])
        # Read the data
        post_data = self.rfile.read(content_length)
        print("Body:")
        print(post_data.decode('utf-8'))
        
        # Call the superclass method to actually handle the request
        http.server.SimpleHTTPRequestHandler.do_POST(self)

IP_ADDRESS = "127.0.0.1"
PORT = 443
Handler = CustomHTTPRequestHandler

context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile="./cert.pem",keyfile="./key.pem")
with socketserver.TCPServer(( IP_ADDRESS, PORT), Handler) as httpd:
    httpd.socket = context.wrap_socket(httpd.socket,
                                   server_side=True)
    print("Serving HTTPS on localhost, port", PORT)
    httpd.serve_forever()
