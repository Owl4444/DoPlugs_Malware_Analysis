<#

# Last updated 30 April 2024

# This script can be run with any removable drive attached to the suspected victim's machine.
# The goal is to look for any low hanging fruits for infection. IOCs were added based on what
# we have in the case PLUS IOCs from Trend Micro's Report.
#>

# Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
# Get-ExecutionPolicy -List

$suspiciousFileAndDirectoryNames = @(
    "Kaspersky",
    "Usb Drive",
    "Nerowaveedit.dat",
    "6.cmd",
    "2.dat",
    "AVAST",
    "SMADAV",
    "Removable Disc",
    "HPSmart",
    "HPReport"
    "licensing.dat",
    "SZBrowser.dll",
    "log.dat"
)

$knownTaskSchedulerNames = @(
    "windows Edge Updates",
    "Security WIFI Script",
    "Security WIFI2 Script",
    "Security WIFI3 Script"
)


$knownNetworkIOC = @(
    @{networkIOC="103.107.104.37"},
    @{networkIOC="149.104.12.64"},
    @{networkIOC="185.82.216.184"},
    @{networkIOC="195.211.96.99"},
    @{networkIOC="195.123.246.26"},
    @{networkIOC="149.104.12.64"},
    @{networkIOC="45.83.236.105"},
    @{networkIOC="45.131.179.179"},
    @{networkIOC="103.192.226.46"},
    @{networkIOC="154.204.27.181"},
    @{networkIOC="103.56.53.120"},
    @{networkIOC="176.113.69.91"},
    @{networkIOC="45.251.240.55"},
    @{networkIOC="149.104.11.29"}
)

$IOCList = @()
$knownFileHashes = @(
    @{Hash="d94cfb772eaf6e46f4765aa7cd02e09e122237204c86c3bac5b9dd5166754daf"; Detection="2.dat"},
    @{Hash="24be7331f4496d0ee8e62a1d9b2cc0fb5a675b3e3cedbf2160f7c49847545c54"; Detection="6.cmd"},
    @{Hash="3f337622ecbb783d017a7f43a45c1faaee01b13da5ca61cc0ee29bd062b59658"; Detection="Nerowaveedit.dat"},
    @{Hash="c7ec098093eb08d2b36d1c37b928d716d8da021f93319a093808a7ceb3b35dc1"; Detection="Backdoor.Win32.DOPLUGS.ZTKI"},
    @{Hash="25967270d67253c72532a7e0416eb27ff249bc17dc1d7cded0148f8f4b932789"; Detection="Trojan.Win32.DOPLUGS.ZTKI"},
    @{Hash="32609faef0b04f0c37c4cf081c147872a45c59d7c4fbca35deb40d144b0226ad"; Detection="Trojan.Win32.DOPLUGS.ZTKI"},
    @{Hash="364f38b48565814b576f482c1e0eb4c8d58effcd033fd45136ee00640a2b5321"; Detection="Backdoor.Win32.DOPLUGS.ZTKI"},
    @{Hash="471e61015ff18349f4bf357447597a54579839336188d98d299b14cff458d132"; Detection="Trojan.Win32.DOPLUGS.ZBKJ"},
    @{Hash="42663f9d1ad0fe190912800b92c64d38b6f74fac23281b87180a4fef5bc2efd6"; Detection="Backdoor.Win32.DOPLUGS.ZAKJ"},
    @{Hash="7c741c8bcd19990140f3fa4aa95bb195929c9429fc47f95cf4ab9fad03040f7b"; Detection="Trojan.Win32.DOPLUGS.ZBKJ"},
    @{Hash="c9da5b0a8dee27fbf5d7bbb4c9b9b38d8c0c547479d315efd62599a3c5d9cb13"; Detection="Backdoor.Win32.DOPLUGS.ZAKJ"},
    @{Hash="6e625bbcecc45b6b556141eef37ffd31aa4861ce4debca6500be72364172ffc7"; Detection="Trojan.Win32.DOPLUGS.ZCKJ"},
    @{Hash="dca39474220575004159ecff70054bcf6239803fcf8d30f4e2e3907b5b97129c"; Detection="Trojan.Win32.DOPLUGS.ZCKK"},
    @{Hash="26b1d37ea3da6a6213b65b000dbb39575d858fa274aea895cc3bf62e706fce5d"; Detection="Backdoor.Win32.DOPLUGS.ZBLA"},
    @{Hash="651c096cf7043a01d939dff9ba58e4d69f15b2244c71b43bedb4ada8c37e8859"; Detection="Trojan.Win32.DOPLUGS.ZTKI"},
    @{Hash="f8c1a4c3060bc139d8ac9ad88d2632d40a96a87d58aba7862f35a396a18f42e5"; Detection="Trojan.Win32.DOPLUGS.ZTKI"},
    @{Hash="67c23db357588489031700ea8c7dc502a6081d7d1a620c03b82a8f281aa6bde6"; Detection="Trojan.Win32.DOPLUGS.ZBKJ"},
    @{Hash="b6f375d8e75c438d63c8be429ab3b6608f1adcd233c0cc939082a6d7371c09bb"; Detection="Trojan.Win32.DOPLUGS.ZBKJ"},
    @{Hash="88c8eb7d2a64e0f675cb2ac3da69cdf314a08a702a65c992bcb7f6d9ec15704b"; Detection="Trojan.Win32.DOPLUGS.ZCKJ"},
    @{Hash="12c584a685d9dffbee767d7ad867d5f3793518fb7d96ab11e3636edcc490e1bd"; Detection="Trojan.Win32.DOPLUGS.ZCKK"},
    @{Hash="71bba2753da5006015bc890d30b1ed207a446e9f34c7e0157d6591bf573f3787"; Detection="Trojan.Win32.DOPLUGS.ZYKL"},
    @{Hash="908ff3a80ef065ab4be1942e0d41583903f6aac02d97df6b4a92a07a633397a8"; Detection="Backdoor.Win32.DOPLUGS.ZTKI.enc"},
    @{Hash="5700535f19a382c8b84db6bff3a077e15269df0ec10ea6257e2fa203720356b4"; Detection="Backdoor.Win32.DOPLUGS.ZALA.enc"},
    @{Hash="a5cd617434e8d0e8ae25b961830113cba7308c2f1ff274f09247de8ed74cac4f"; Detection="Backdoor.Win32.DOPLUGS.ZTKI.enc"},
    @{Hash="0df7e56610adad2ed5adfdfab07faedc08a61d9f944a5448aa62e071cffc28c4"; Detection="Backdoor.Win32.DOPLUGS.ZCKJ.enc"},
    @{Hash="095855cf6c82ae662cce34294f0969ca8c9df266736105c0297d2913a9237dd1"; Detection="Backdoor.Win32.DOPLUGS.ZCKJ.enc"},
    @{Hash="8e4a4d202d57c79dc0f40ae032f9d7b0ea7ce5024128a2aa227decc228e16113"; Detection="Backdoor.Win32.DOPLUGS.ZCKJ.enc"},
    @{Hash="95205b92d597489b33854e70d86f16d46201803a1a9cb5379c0d6b7c0784dbc7"; Detection="Backdoor.Win32.DOPLUGS.ZBKK.enc"},
    @{Hash="70fac63465187ae5c2f057efc291bc34987dff46bec565a7e8f07f9899527224"; Detection="Backdoor.Win32.DOPLUGS.ZYKL.enc"},
    @{Hash="8615cc8487833522ffd014c0f0661b3d1bed7a4cb51138b1ee172173002192be"; Detection="Trojan.Win32.PLUGX.ZBLA"; },
    @{Hash="b6e88396594070a92cbf1c313858392b052703944162de64ce3ad494996bd177"; Detection="Backdoor.Win32.PLUGX.ZCLA.enc"; },
    @{Hash="583941ca6e1a2e007f5f0e2e112054e44b18687894ac173d0e93e035cea25e83"; Detection="Trojan.Win32.PLUGX.ZTKI"; },
    @{Hash="e3bae2e2b757a76db92ab017328d1459b181f8d98e04b691b62ff65d1e1be280"; Detection="Backdoor.Win32.PLUGX.ZTKI.enc"; },
    @{Hash="60b3a42b96b98868cae2c8f87d6ed74a57a64b284917e8e0f6c248c691d51797"; Detection="Trojan.Win32.PLUGX.ZTKI"; },
    @{Hash="eb9e557fac3dd50cc46a544975235ebfce6b592e90437d967c9afba234a33f13"; Detection="Backdoor.Win32.PLUGX.ZTKI.enc"; },
    @{Hash="16b62c9dc6060a19a5b64491b7242ace1c707dbe531b843c854fcc1dc39febbe"; Detection="Trojan.Win32.PLUGX.ZCKJ"; },
    @{Hash="5dd7813fa8aad22bd6c80811c8c7300f114a8e7897a2bd46343a06884d774914"; Detection="Backdoor.Win32.PLUGX.ZBKJ.enc"; },
    @{Hash="3fa7eaa4697cfcf71d0bd5aa9d2dbec495d7eac43bdfcfbef07a306635e4973b"; Detection="Backdoor.Win32.DOPLUGS.ZBLA"},
    @{Hash="a0c94205ca2ed1bcdf065c7aeb96a0c99f33495e7bbfd2ccba36daebd829a916"; Detection="Backdoor.Win32.DOPLUGS.ZBLA"},
    @{Hash="17225c9e46f809556616d9e09d29fd7c13ca90d25ae21e00cc9ad7857ee66b82"; Detection="Backdoor.Win32.DOPLUGS.ZBLA"},
    @{Hash="d0ca6917c042e417da5996efa49afca6cb15f09e3b0b41cbc94aab65a409e9dc"; Detection="Backdoor.Win32.DOPLUGS.ZBLA"},
    @{Hash="d64afd9799d8de3f39a4ce99584fa67a615a667945532cfa3f702adbe27724c4"; Detection="Backdoor.Win32.PLUGX.SMSF"},
    @{Hash="c4627a5525a7f39205412a915fd52b93d83ef0115ee1b2642705fe1a08320692"; Detection="Trojan.Win32.DOPLUGS.ZALA"},
    @{Hash="39f8288ef21f5d6135f8418a36b9045c9758c4e7a4e4cab4aff4c1c6119f901a"; Detection="Trojan.Win32.DOPLUGS.ZALA"},
    @{Hash="42c18766b5492c5f0eaa935cf88e57d12ffd30d6f3cc2e9e0a3c0bdcdfa44ad5"; Detection="Trojan.Win32.DOPLUGS.ZCLA"},
    @{Hash="9610cbcd4561368b6612cad1693982c43c8d81b0d52bb264c5f606f2478c1c58"; Detection="Trojan.Win32.DOPLUGS.ZALA"},
    @{Hash="4c1b5283f05322edfb0ef8b9d5cf75b62b558fcaefed921f1143765a3bd6248e"; Detection="Backdoor.Win32.DOPLUGS.ZCLA.enc"},
    @{Hash="e6bc87e3e3d98a0a8db4fcd7cd5a9b89d4a7b125de450dfb8f387d2a9e09face"; Detection="Backdoor.Win32.DOPLUGS.ZCLA.enc"},
    @{Hash="13c31dbbae53517a17f7e6c99031480babe2bd8a07151dbb7f344ab620f3ac11"; Detection="Backdoor.Win32.DOPLUGS.ZALA.enc"},
    @{Hash="ca1ada6770b85771f98e5c02310449ab73231034cfa78b8861850368208c7698"; Detection="Backdoor.Win32.DOPLUGS.ZCLA.enc"},
    @{Hash="abd6521990e88bd18bbcba063744efe0ccac23063bb340720cc3f610d9b1c770"; Detection="Backdoor.Win32.DOPLUGS.ZALA.enc"},
    @{Hash="77a49637bf4047959419c41867437957619d03059b5d3f8d9af26e6ae2347db6"; Detection="Trojan.Win32.DOLAUNCH.ZALA.enc"},
    @{Hash="f4f36c78cbf9901f224de427f42b390c83190c7c1cc4bce8b66f596e62df02d0"; Detection="Trojan.Win32.DOLAUNCH.ZBLA.enc"},
    @{Hash="48e37bb7e1ac185d314f262894014e1337a3c14455cd987dd83ac220bae87b3a"; Detection="Trojan.Win32.DOLAUNCH.ZBLA"},
    @{Hash="33ff6318a3e745420c884f35709f2799f2fe461a6a5bb5b1e3166b9ab2ff142f"; Detection="Trojan.Win32.DOPLINK.ZTKJ"},
    @{Hash="04679defa1a4009bddab2a5d81be747b51a7f0f7aa5e7ebb937b40379a6a4690"; Detection="Trojan.LNK.DOPLINK.ZTKI"},
    @{Hash="a102626700691e57ece83a4ce24d995e57449508238eb5688954b78448be9172"; Detection="Trojan.Win32.DOPLINK.ZTKJ"},
    @{Hash="1a8aeee97a31f2de076b8ea5c04471480aefd5d82c57eab280443c7c376f8d5c"; Detection="Trojan.LNK.DOPLINK.ZTKI"},
    @{Hash="a0a3eeb6973f12fe61e6e90fe5fe8e406a8e00b31b1511a0dfe9a88109d0d129"; Detection="Trojan.Win32.DOPLINK.ZAKJ"},
    @{Hash="cd60e1c7d418a9c6ad4705d315f8ace2cdc3fd0528e71064dd80bbbd51bc2b76"; Detection="Trojan.Win32.DOPLINK.ZAKJ"},
    @{Hash="74f3101e869cedb3fc6608baa21f91290bb3db41c4260efe86f9aeb7279f18a1"; Detection="Trojan.Win32.DOPLINK.ZAKJ"}
)


<#
$message = "Suspicious file on USB drive detected: $($_.FullName)"
Write-Output $message
Add-Content -Path $logPath -Value "$(Get-Date) - $message"
# Optional: Send alert via email or system notification
#>


Write-Host "[*] Enumerating Drive Types ... " -ForegroundColor Yellow
Get-CimInstance -ClassName Win32_LogicalDisk | Select-Object DeviceID, @{
    Name = "DriveType"
    Expression = {
        switch ($_.DriveType) {
            2 {"Removable Disk"}
            3 {"Local Disk"}
            4 {"Network Drive"}
            5 {"Compact Disc"}
            6 {"RAM Disk"}
            Default {"Unknown"}
        }
    }
}, FileSystem, @{
    Name = "FreeSpace_GB"
    Expression = { [math]::Round($_.FreeSpace / 1GB, 2) }
}, @{
    Name = "Size_GB"
    Expression = { [math]::Round($_.Size / 1GB, 2) }
}




function Enumerate-RunKeys {
    param(
        [string[]]$Paths
    )

    foreach ($Path in $Paths) {
        Write-Host "[*] Enumerating Run Key in: $Path" -ForegroundColor Yellow
        try {
            $items = Get-ItemProperty -Path $Path -ErrorAction Stop
            if ($items.PSObject.Properties.Count -gt 0) {
                foreach ($item in $items.PSObject.Properties) {
                    Write-Host "    [$($item.Name)]: `t$($item.Value)" -ForegroundColor white
                }
            } else {
                Write-Host "    [INFO]: No items found in $Path." -ForegroundColor Yellow
            }
        } catch {
            Write-Host "    [ERROR]: Failed to access $Path. You might need elevated permissions." -ForegroundColor Red
        }
    }
}

# Define the registry paths for Current User and Local Machine "Run" keys
$registryPaths = @(
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run"
)

# Call the function to enumerate the "Run" keys
Enumerate-RunKeys -Paths $registryPaths

function Check-RegistrySetting {
    param(
        [string]$Path,
        [string]$Key,
        $ExpectedValue,
        [string]$Condition,
        [string]$Context
    )
    
    $value = Get-ItemProperty -Path $Path -Name $Key -ErrorAction SilentlyContinue
    if ($value -and $Condition -eq "eq" -and $value.$Key -eq $ExpectedValue) {
        Write-Host "    [POSSIBLE] - '$Path' $Context" -ForegroundColor Red
        Write-Host "`t`t--> $($value.$Key)" -ForegroundColor Red
    } elseif ($value -and $Condition -eq "neq" -and $value.$Key -ne $ExpectedValue) {
        Write-Host "    [POSSIBLE] - '$Path' $Context" -ForegroundColor Red
        Write-Host "`t`t--> $($value.$Key)" -ForegroundColor Red
    } else {
        Write-Host "    [OK] - $Path $Context is not altered" -ForegroundColor Green
    }
}


$possibleMaliciousProcessNamesList = @(
    "waveedit",
    "OneNotem",
    "notelogger",
    "Avastsz",
    "adobe_licensing_wf_helper"
)


$registryChecks = @(
    @{
        Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run";
        Key = "WaveEditXkG";
        ExpectedValue = $null; # Any value other than $null is dangerous
        Condition = "neq";
        Context = "";
    },
    @{
        Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced";
        Key = "Hidden";
        ExpectedValue = 0;
        Condition = "eq";
        Context = "Hidden";
    },
    @{
        Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced";
        Key = "ShowSuperHidden";
        ExpectedValue = 0;
        Condition = "eq";
        Context = "ShowSuperHidden";
    },
    @{
        Path = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced";
        Key = "HideFileExt";
        ExpectedValue = 1;
        Condition = "eq";
        Context = "HideFileExt";
    }
)

Write-Host "[*] Checking Registry Settings ..." -ForegroundColor Yellow
foreach ($check in $registryChecks) {
    Check-RegistrySetting -Path $check.Path -Key $check.Key -ExpectedValue $check.ExpectedValue -Condition $check.Condition -Context $check.Context
}


Write-Host "[*] Checking Scheduled Tasks ... " -ForegroundColor Yellow

foreach($taskName in $knownTaskSchedulerNames){
    $tasks = Get-ScheduledTask | Where-Object {$_.TaskName -eq $taskName} -ErrorAction SilentlyContinue
    if ($tasks) {
        foreach ($task in $tasks) {
            Write-Host "    [DANGER] - Task '$taskName' is present in the Task Scheduler" -ForegroundColor Red
        }
    } else {
        Write-Host "    Listed known Task '$taskName' is not in Task Scheduler" -ForegroundColor white
    }
}


Write-Host "Checking Network Connections ..." -ForegroundColor Yellow
$internetConnection = get-nettcpconnection |Where-Object {$_.State -eq "Established"} |Select-Object OwningProcess, LocalAddress, LocalPort, RemoteAddress, RemotePort

foreach ($conn in $internetConnection){
    foreach ($networkIOC in $knownNetworkIOC){
        if ($conn.RemoteAddress -eq $networkIOC.networkIOC){
            Write-Host "*** $($processName.ProcessName) ($($conn.OwningProcess)) - $($conn.LocalAddress):$($conn.LocalPort) --> $($conn.RemoteAddress):$($conn.RemotePort)" -ForegroundColor Red
            $processName = get-process | where-object {$_.Id -eq $conn.OwningProcess} | select-object ProcessName
            $foundSuspiciousIP = $false
            foreach($possibleMaliciousProcessName in $possibleMaliciousProcessNamesList){
                if ($processName.ProcessName -like "*$possibleMaliciousProcessName*"){
                    Write-Host "*** $($processName.ProcessName) ($($conn.OwningProcess)) - $($conn.LocalAddress):$($conn.LocalPort) --> $($conn.RemoteAddress):$($conn.RemotePort)" -ForegroundColor Red
                    $foundSuspiciousIP = $true
                    break
                }
                                    
            }
            if($foundSuspiciousIP){
                Write-Host "$($processName.ProcessName) ($($conn.OwningProcess)) - $($conn.LocalAddress):$($conn.LocalPort) --> $($conn.RemoteAddress):$($conn.RemotePort)" -ForegroundColor Red
            }

            
        }
    }
}



Write-Host "[*] Looking for Drives ... " -ForegroundColor Yellow
foreach ($entry in $knownFileHashes){
    $obj = New-Object -TypeName PSObject -Property @{Hash=$entry.Hash;DetectionName=$entry.Detection}
    $IOCList += $obj
}
$driveInfo = Get-WmiObject Win32_volume 

if ($driveInfo) {
    foreach ($info in $driveInfo) {
        if ($info.drivetype -eq 2){
            Write-Host "THIS IS A REMOVABLE DRIVE" -ForegroundColor Cyan
        }  # This is used to check if it is removable disk but it seems we may need to look into many other files in case.
            Write-Host "[*] Device ID : '$($info.deviceId)' " -ForegroundColor DarkYellow 
            Write-Host "    - Drive Name : '$($info.name)' " -ForegroundColor DarkYellow         
            Write-Host "    - Capacity : '$($info.capacity)' " -ForegroundColor DarkYellow         
            Write-Host "    - Drive Type : '$($info.drivetype)' " -ForegroundColor DarkYellow 
            Write-Host "    - Computer Name : '$($info.PSComputerName)' " -ForegroundColor DarkYellow 
            Write-Host "    - File System : '$($info.fileSystem)' " -ForegroundColor DarkYellow 
            Write-Host "    - Capacity : '$($info.capacity)' " -ForegroundColor DarkYellow 
            Write-Host "    - Automount : '$($info.automount)' " -ForegroundColor DarkYellow 
            Write-Host "    - Serial Number : '$($info.serialNumber)' " -ForegroundColor DarkYellow 
            Write-Host " "

            Write-Host "    [*] Searching for folders in file system" -ForegroundColor Yellow

            if ([string]::IsNullOrWhiteSpace($info.Name)){
                Write-Host "The drive name is null or whitespace" -Foregroundcolor whitespace
            }else{
                try{
                    #$hiddenSystemFiles = get-childitem -path $info.name -Recurse  -Force -ErrorAction SilentlyContinue | where-object {$_.Attributes -band [System.IO.FileAttributes]::Hidden -or $_.Attributes -band [System.IO.FileAttributes]::System}
                    $hiddenSystemFiles = get-childitem -path $info.name -Recurse   -Force -ErrorAction SilentlyContinue 
                    $suspiciousFileAndDirectoryArrayList = New-Object -TypeName System.Collections.ArrayList

                    foreach($file in $hiddenSystemFiles){
                        

                        $isSuspicious = $false
                        foreach($suspiciousFileAndDirectoryName in $suspiciousFileAndDirectoryNames){
                            if ($file.Name -eq "$suspiciousFileAndDirectoryName"){
                                if ($file.Attributes -band [System.IO.FileAttributes]::Hidden){
                                    Write-Host "[HIDDEN] - $($file.FullName)" -ForegroundColor Cyan
                                }
                                Write-Host "        [DANGER] -Suspicious File/Folder '$($file.FullName)' FOUND" -ForegroundColor Red
                                $suspiciousFileAndDirectoryArrayList.Add($file.FullName)
                                $isSuspicious = $true
                                break;  
                            }
                        }

                        if(-not $isSuspicious){
                            # Write-host "    - $($file)" -ForegroundColor Cyan
                        } 

                        
                    }
                    Write-Host " "
                        Write-Host "Searching against known File Hashes and/or File Names" -ForegroundColor Yellow
                        Write-Host "====================================================================="  -ForegroundColor Yellow
                        $suspiciousFileCount = 0
                        foreach($suspiciousFileAndDirectoryName in $suspiciousFileAndDirectoryArrayList){
                            
                            $fileHash = Get-FileHash $suspiciousFileAndDirectoryName -Algorithm SHA256
                            foreach ($knownFileHashIOC in $knownFileHashes){
                                if($knownFileHashIOC.Hash -match $fileHash.hash){
                                    Write-Host "    - $suspiciousFileAndDirectoryName" -ForegroundColor RED
                                    $suspiciousFileCount += 1
                                    break
                                }
                            }
                        }
                        if ($suspiciousFileCount -gt 0){
                            Write-Host "[-] THERE ARE $suspiciousFileCount FILE HITS IN $($info.deviceId)" -ForegroundColor Red
                        }else{
                            Write-Host "[+] There are no file hits in the $($info.deviceId)" -ForegroundColor White
                        }
                        Write-Host "====================================================================="  -ForegroundColor Yellow
                }catch{
                    Write-Host "Error retrieving files from path : $($info.Name)"
                    Write-Host "Error: $_"
                }
            }
            
        #}
    }
} 



$possibleMaliciousProcessNamesList = @(
    "waveedit",
    "OneNotem",
    "notelogger",
    "Avastsz",
    "adobe_licensing_wf_helper"
)



Write-Host "Enumerating all processes ... " -ForegroundColor Yellow

$processList = get-process 
foreach ($process in $processList){
    $isPossibleMaliciousProcess = $false
    foreach($possibleMaliciousProcessName in $possibleMaliciousProcessNamesList){
        if ($process.Name -like "*$possibleMaliciousProcessName*"){
            Write-Host "!!!! SCAN WITH ScanProcessMemory.ps1 !!!! - $($process.Id) - $($process.Name)" -ForegroundColor Red
            $isPossibleMaliciousProcess = $true
            break
        }    
    }
    if($isPossibleMaliciousProcess -eq $false){
        Write-Host "$($process.Id) - $($process.Name)" -ForegroundColor gray
    }
}

Write-Host "Enumerating files in %Appdata%/Roaming/Render/ ... "  -ForegroundColor Yellow
Write-Host "If there anything below, it may mean that there were internet connections if there are any infection "  -ForegroundColor Yellow
$renderDir = "$env:USERPROFILE\AppData\Roaming\Render\"
if(Test-Path -Path $renderDir){
    Write-Host "Render path found ! Listing files in render path" -ForegroundColor Magenta
    Get-ChildItem -Path $renderDir -Force -Recurse

}else{
    Write-Host "Render path not found!" -ForegroundColor green
}


