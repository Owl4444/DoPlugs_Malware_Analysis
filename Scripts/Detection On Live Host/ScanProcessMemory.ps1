# Last updated 30 April 2024

# Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
# Get-ExecutionPolicy -List

### CHECK IF ANYTHING NEW at the end of the results from DOPLUGS_Quick_Check.ps1 


$suspiscious_process_list = @(
    "waveedit",
    "OneNotem",
    "notelogger",
    "Avastsz",
    "adobe_licensing_wf_helper"
)

# Define suspicious strings
$suspiciousStringsInMalware = @(
    "sV!e@T#L$PH%a3c5",
    "GfvUvheHloxh",
    "kfpkak5",
    "CONNECT %s:%d HTTP/1.1",
    "%appdata%\\Render\\",  # Corrected with double backslashes
    "System\\CurrentControlSet\\Control\\Network",
    "%comspec% /q /c ",
    "ipconfig",
    "tasklist /v", 
    "Usb Disk\(",
    "21Education",
    "6.cmd",
    "2.dat",
    "Nerowaveedit.dat"
    "ShowSuperHidden",
    "HideFileExt",
    "SMADAV",
    "USB_NOTIFY2_INF",
    "USB_NOTIFY2_COP_",
    "Kaspersky"
)

$toolFolderName = "tools"
$dumpFolderName = "dump__"
$default_location_to_go_back_to = Get-Location
$currentLocation = Get-Location                                                   # SAME AS THE RUN SCRIPT
$toolLocation = $(Join-Path -Path $currentLocation -ChildPath $toolFolderName)
$sysInternalsSuiteLocation = $(Join-Path -Path $toolLocation -ChildPath "SysInternalsSuite")
$dumpLocation = $(Join-Path -Path $currentLocation -ChildPath $dumpFolderName)

Write-Host "Checking for tools/SysinternalsSuite" -ForegroundColor Yellow
if (-Not (Test-Path -Path $sysinternalsSuiteLocation)){
    Write-Host "./tools/SysinternalsSuite folder not found..." -ForegroundColor Magenta
    exit
}

Write-Host "Dumping process ..." -ForegroundColor Yellow


if(Test-Path -path $dumpFolderName){
    Write-Host "Deleting old dump files ..." -ForegroundColor Yellow
    del $dumpLocation
}
Write-Host "Creating Dumping Ground ..." -ForegroundColor Yellow
mkdir $dumpFolderName

$processList = get-process 
foreach ($process in $processList){
    foreach($p in $suspiscious_process_list){
        if($process.Name -like $p){
            ## Scan memory to see whether or not there are yara match if any
            Write-Host "Dumping process $($process.name), PID : $($process.id)" -ForegroundColor White
            & $(Join-Path -Path $sysInternalsSuiteLocation -ChildPath "procdump64.exe") -accepteula -r -ma -o $process.id $dumpLocation
        }
    }
    
    

}
Write-Host "Dumping processes done" -ForegroundColor White
Write-Host "Scanning for suspicious strings in current running processes" -ForegroundColor Yellow


# Create a single regex pattern from all strings
$regexPattern = ($suspiciousStringsInMalware -join "|")
#Write-Host "Regex Pattern: $regexPattern"

# Path to dumped files
$dumped_files_location = $dumpLocation
$dumped_files = Get-ChildItem -Path $dumped_files_location

# Strings.exe path
$stringsPath = Join-Path -Path $sysInternalsSuiteLocation -ChildPath "strings64.exe"

# Process each dumped file
foreach ($dumped_file in $dumped_files) {
    Write-Host "Scanning file: $($dumped_file.Name)" -ForegroundColor Cyan
    Write-Host " "
    $result = & ($stringsPath) -accepteula $dumped_file.FullName | select-string -Pattern $regexPattern -CaseSensitive
    write-host $result
    # Output results
    if ($results) {
        foreach($result in $results){
            Write-Host "Suspicious strings found in $($dumped_file.Name):" -ForegroundColor Red
            Write-Host $result
        }
        
    } 
    Write-Host " "
}

cd $default_location_to_go_back_to

